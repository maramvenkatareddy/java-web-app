pipeline {
    agent any

    triggers {
        pollSCM('H/5 * * * *') // Polls every 5 minutes instead of every minute
    }

    tools {
        maven 'maven'  // Ensure Maven is configured in Jenkins Global Tool Configuration
    }

    environment {
        SONAR_PROJECT_KEY = 'myjavaprojects_java_web'
    }

    stages {
        stage('Clone the code from GitHub') {
            steps {
                script {
                    // Ensure the GitHub repository and branch exist
                    git branch: 'sonar', url: 'https://github.com/maramvenkatareddy/java-web-app.git'
                }
            }
        }

        stage('Build the code and SonarQube analysis') {
            steps {
                script {
                    // Ensure SonarQube environment is set correctly
                    withSonarQubeEnv('sonar') {
                        sh """
                            mvn clean install sonar:sonar \
                            -Dsonar.projectKey=myjavaprojects_java_web \
                            -Dsonar.organization=myjavaprojects \
                            -Dsonar.projectName=java_web
                        """
                    }
                }
            }
        }
        stage('Quality Gate') {
                steps {
                    timeout(time: 5, unit: 'MINUTES') {
                        script {
                            def qualityGate = waitForQualityGate()
                            if (qualityGate.status != 'OK') {
                                error "Quality Gate failed: ${qualityGate.status}"
                            }
                        }
                    }
                }
            }
    }
}
