pipeline {
    agent any

    triggers {
        pollSCM('H/5 * * * *') // Polls every 5 minutes instead of every minute
    }

    tools {
        maven 'maven'  // Ensure Maven is configured in Jenkins Global Tool Configuration
    }

    environment {
        SONAR_PROJECT_KEY = 'myjavaprojects_java_web'
    }

    stages {
        stage('Clone the code from GitHub') {
            steps {
                script {
                    // Ensure the GitHub repository and branch exist
                    git branch: 'sonar', url: 'https://github.com/maramvenkatareddy/java-web-app.git'
                }
            }
        }

        stage('Build the code and SonarQube analysis') {
            steps {
                script {
                    // Ensure SonarQube environment is set correctly
                    withSonarQubeEnv('sonar') {
                        sh """
                            mvn clean install sonar:sonar \
                            -Dsonar.projectKey=Java_web  \
                            -Dsonar.projectName=Java_web
                        """
                    }
                }
            }
        }
        stage('Quality Gate') {
                steps {
                    timeout(time: 5, unit: 'MINUTES') {
                        script {
                            def qualityGate = waitForQualityGate()
                            if (qualityGate.status != 'OK') {
                                error "Quality Gate failed: ${qualityGate.status}"
                            }
                        }
                    }
                }
            }
       // stage('Deploy to Artifactory') {
       //    environment {
       //         TARGET_REPO = 'java-web-app-libs-release'
       //     }
       //     
       //     steps {
       //         script {
       //             try {
       //                 def server = Artifactory.newServer url: 'https://trial7lu07a.jfrog.io/artifactory', credentialsId: 'jfrog_user_pass'
       //                 def uploadSpec = """{
       //                     "files": [
       //                         {
       //                             "pattern": "target/*.jar",
       //                             "target": "${TARGET_REPO}/"
       //                         }
       //                     ]
       //                 }"""
       //                 
       //                 server.upload(uploadSpec)
       //             } catch (Exception e) {
       //                 error("Failed to deploy artifacts to Artifactory: ${e.message}")
       //             }
       //         }
       //      }
       //  }
       // stage('deploy to artifacts'){
       //     environment {
       //         jfrog_url = 'https://trial7lu07a.jfrog.io'
       //     }
       //     steps {
       //         withCredentials([string(credentialsId: 'Jfrog_token_new', variable: 'ARTIFACTORY_TOKEN')]) {
       //             sh """
       //                  jf c add --url ${jfrog_url} --access-token ${ARTIFACTORY_TOKEN} --interactive=false
       //                  jf rt u target/*.jar java-web-app-libs-snapshot/
       //             """
       //         }
       //     }
       // }
        stage('deploy through artifactory') {
            steps {
                rtUpload (
                    serverId: 'jfrog_artifactory',
                    spec: '''{
                          "files": [
                            {
                              "pattern": "target/*.jar",
                              "target": "java-web-app-libs-snapshot/"
                            }
                         ]
                    }''',
                    project: 'bankok application'
                )
            }
        }
        stage ('Publish build info') {
            steps {
                rtPublishBuildInfo (
                    serverId: 'jfrog_artifactory'
                )
            }
        }
    }
}
