#!/usr/bin/env groovy
node('master') {
    // Environment variables
    environment {
        data_helper_repo_url = "https://github.com/maramvenkatareddy/node_js.git"
        platform_app_url = "https://github.com/maramvenkatareddy/java-web-app.git"
        // Uncomment if needed: GITHUB_TOKEN = credentials('ggit')
    }

    try {
        // Read the config file and set the environment
        property = readYaml file: "config.yaml"
        if (ENVIRONMENT == "qa") {
            config = property.qa
            echo "Config: ${config}"
        } else if (ENVIRONMENT == "prod") {
            config = property.prod
            echo "Config: ${config}"
        } else {
            error "ENVIRONMENT variable not set or invalid!"
        }
    } catch (Exception e) {
        error "Failed at reading config file. Error: ${e}"
    }

    try {
        // Stages for the pipeline
        stage('Clone Datahelper Repository') {
            git branch: "${BRANCH_NAME}", url: "${data_helper_repo_url}"
            echo "Checked out Datahelper Repository"
        }

        stage('Build Datahelper Repository') {
            echo "Building Datahelper Repository"
            // Changed logic to handle Node.js builds
            if (fileExists("package.json")) {
                sh 'npm install'
                sh 'npm run build' // Replace with your custom build command if required
            } else {
                error "package.json not found in the repository!"
            }
        }

        stage('Clone Platform Repository') {
            git branch: "${BRANCH_NAME}", url: "${platform_app_url}"
            echo "Checked out Platform Repository"
        }

        stage('Build Platform Repository') {
            echo "Building Platform Repository"
            if (fileExists("pom.xml")) {
                sh 'mvn clean install -DskipTests'
            } else {
                error "pom.xml not found in the repository!"
            }
        }

        stage('Docker Build') {
            dir("${config.path}") {
                // Conditional Dockerfile selection based on the environment
                def dockerfile = ENVIRONMENT == "qa" ? "Dockerfile.qa" : "Dockerfile.prod"
                sh "docker build -t ${config.ecr_url}/${config.repo_name}:${BRANCH_NAME}-${GIT_COMMIT} -f ${dockerfile} ."
                sh "docker tag ${config.ecr_url}/${config.repo_name}:${BRANCH_NAME}-${GIT_COMMIT} ${config.ecr_url}/${config.repo_name}:latest"
            }
        }

        stage('Docker Image Push to ECR Repo') {
            dir("${config.path}") {
                sh "aws ecr get-login-password --region ${config.region} | docker login --username AWS --password-stdin ${config.ecr_url}"
                sh "docker push ${config.ecr_url}/${config.repo_name}:${BRANCH_NAME}-${GIT_COMMIT}"
                sh "docker push ${config.ecr_url}/${config.repo_name}:latest"
            }
        }

    } catch (Exception e) {
        error "Pipeline failed with error: ${e}"
    }
}
