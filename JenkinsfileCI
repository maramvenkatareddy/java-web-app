node('master') {
    checkout scm
    def data_helper_repo_url = 'https://github.com/maramvenkatareddy/node_js.git'
    def platform_app_url = 'https://github.com/maramvenkatareddy/java-web-app.git'
     properties([
        pipelineTriggers([
            // Poll SCM for changes in the specific repository
            pollSCM("* * * * *") // This is the cron schedule format
        ])
    ])

    try {
        // Read the config file and set the environment
        property = readYaml file: "config.yaml"
        if (ENVIRONMENT == "qa") {
            config = property.qa
            echo "Config: ${config}"
        } else if (ENVIRONMENT == "prod") {
            config = property.prod
            echo "Config: ${config}"
        } else {
            error "ENVIRONMENT variable not set or invalid!"
        }
    } catch (Exception e) {
        error "Failed at reading config file. Error: ${e}"
    }

    try {
        def commitHash = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
        def branchName = sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
        // Debugging: echo the repository URLs
        echo "Data Helper Repo URL: ${data_helper_repo_url}"
        echo "Platform App Repo URL: ${platform_app_url}"
        echo "Branch Name: ${branchName}"
        echo "commit_hash: ${commitHash}"
        sh "printenv"

        // Clone Datahelper Repository
        stage('Clone Platform Application Repository') {
            dir('repo2') {
                echo "Cloning repository: ${platform_app_url}"
                git branch: "main", url: "https://github.com/maramvenkatareddy/java-web-app.git"
                echo "Checked out Platform Application Repository"
                sh "ls"
            }
        }
        stage('Clone Datahelper Repository') {
            dir('repo1') {
                echo "Cloning repository: ${data_helper_repo_url}"
                echo "Branch Name: ${branchName}"
                echo "commit_hash: ${commitHash}"
                git branch: "main", url: "https://github.com/maramvenkatareddy/node_js.git"
                echo "Checked out Datahelper Repository"
                sh "ls"
            }
        }
        stage('build the dependency') {
            dir('repo1') {
                sh "npm install"
            }
        }
    
        stage('buidl') {
            dir('repo2') {
                sh "mvn clean install"
            }
        }
        stage('Docker build') {
          dir("${config.path}") {
            current = "Stage Docker build"
             if (ENVIRONMENT == "qa") {
                sh "docker build -t ${config.ecr_url}/${config.repo_name}:${env.GIT_COMMIT}-1 -f Dockerfile.qa ."
             } else if (ENVIRONMENT == "prod") { 
                sh "docker build -t ${config.ecr_url}/${config.repo_name}:${env.GIT_COMMIT}-1  -f Dockerfile.prod ."
             }
            sh "docker tag ${config.ecr_url}/${config.repo_name}:main-1 ${config.ecr_url}/${config.repo_name}:latest"
          }
        }
  
        stage('Docker Image Push to ECR Repo') {
            dir("${config.path}") {
              stage('Docker Image Push to Ecr') {
                current = "Stage Docker Image Push to Ecr"
                sh "aws ecr get-login-password --region ${config.region} | docker login --username AWS --password-stdin ${config.ecr_url}"
                sh "docker push ${config.ecr_url}/${config.repo_name}:main-1"
                sh "docker push ${config.ecr_url}/${config.repo_name}:latest"
            }
          }
        }

        // Other stages go here...

    } catch (Exception e) {
        error "Pipeline failed with error: ${e}"
    }
}
