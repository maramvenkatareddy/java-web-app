pipeline {
    agent any

    environment {
        data_helper_repo_url = 'https://github.com/maramvenkatareddy/node_js.git'
        platform_app_url = 'https://github.com/maramvenkatareddy/java-web-app.git'
        k8s_manifest_url = 'https://github.com/maramvenkatareddy/sample-project.git'
        GITHUB_TOKEN = credentials('ggit')
        branch = 'main'
        def commitHash = sh(script: "git rev-parse HEAD", returnStdout: true).trim()

    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Read Config YAML') {
            steps {
                script {
                    try {
                        property = readYaml file: "config.yaml"
                        if (env.ENVIRONMENT == "qa") {
                            config = property.qa
                            echo "Config: ${config}"
                        } else if (env.ENVIRONMENT == "prod") {
                            config = property.prod
                            echo "Config: ${config}"
                        } else {
                            error "ENVIRONMENT variable not set or invalid!"
                        }
                    } catch (Exception e) {
                        error "Failed at reading config file. Error: ${e}"
                    }
                }
            }
        }

        stage('Clone Platform Application Repository') {
            steps {
                dir('repo2') {
                    git branch: "${branch}", url: "${platform_app_url}", credentialsId: 'ggit', changelog: true, poll: true
                }
            }
        }

        stage('Clone Data Helper Repository') {
            steps {
                dir('repo1') {
                    git branch: "${branch}", url: "${data_helper_repo_url}", credentialsId: 'ggit', changelog: true, poll: false
                }
            }
        }

        stage('Build Dependency') {
            steps {
                dir('repo1') {
                    sh "npm install"
                }
            }
        }

        stage('Build Application') {
            steps {
                dir('repo2') {
                    sh "mvn clean install"
                }
            }
        }

        stage('Docker Build') {
            steps {
                dir("${config.path}") {
                    script {
                        if (env.ENVIRONMENT == "qa") {
                            sh "docker build -t ${config.ecr_url}/${config.repo_name}:${config.environment}-${commitHash} -f Dockerfile.qa ."
                        } else if (env.ENVIRONMENT == "prod") {
                            sh "docker build -t ${config.ecr_url}/${config.repo_name}:${config.environment}-${commitHash} -f Dockerfile.prod ."
                        }
                        sh "docker tag ${config.ecr_url}/${config.repo_name}:${config.environment}-${commitHash} ${config.ecr_url}/${config.repo_name}:latest"
                    }
                }
            }
        }

        stage('Docker Image Push to ECR Repo') {
            steps {
                dir("${config.path}") {
                    script {
                        sh "aws ecr get-login-password --region ${config.region} | docker login --username AWS --password-stdin ${config.ecr_url}"
                        def commitHash = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                        sh "docker push ${config.ecr_url}/${config.repo_name}:${config.environment}-${commitHash}"
                        sh "docker push ${config.ecr_url}/${config.repo_name}:latest"
                    }
                }
            }
        }
        stage('Update Image Tag in Deployment File') {
    steps {
        script {
            // Clean up existing k8s directory if it exists
            if (fileExists('k8s')) {
                sh 'rm -rf k8s'
            }

            // Clone the k8s manifests repository
            dir('k8s') {
                git branch: "${branch}", 
                    url: "${k8s_manifest_url}", 
                    credentialsId: 'ggit'
            }

            // Change to the cloned directory
            dir('k8s') {
                // Set Git configuration
                sh 'git config user.email "venkat@gmail.com"'
                sh 'git config user.name "venkat"'

                // Define the deployment file path
                def deploymentFile = 'eks/prod/deployment.yaml'

                // Ensure the deployment file exists
                if (fileExists(deploymentFile)) {
                    echo "Updating image tag in ${deploymentFile}"
                    echo "commithash: ${commitHash}"
                    sh 'git status'
                    sh 'git branch'

                    // Update image tag using sed
                    sh """ 
                        grep 'image:' eks/prod/deployment.yaml
                        sed -i 's|image: [^ ]*|image: ${config.ecr_url}/${config.repo_name}:${config.environment}-${commitHash}|' ${deploymentFile}
                        grep 'image:' eks/prod/deployment.yaml
                    """
                    // Add changes
                    sh 'git add ${deploymentFile}'

                    // Commit changes
                    sh 'git commit -m "Updated to the newer version ${commitHash}"'
                    sh 'gi status'

                    // Push changes using credentials
                    withCredentials([usernamePassword(credentialsId: 'ggit', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh """
                            git push https://${USERNAME}:${PASSWORD}@github.com/${USERNAME}/sample-project.git HEAD:${branch}
                        """
                    }

                    // Print the contents of the deployment file for verification
                    sh "cat ${deploymentFile}"
                } else {
                    error "Deployment file ${deploymentFile} not found!"
                    }
                }
            }
        }
    }
}

post {
    always {
        slackSend(
            channel: 'jenkins',
            message: """
                *Pipeline Status:*    ${currentBuild.currentResult}
                *Job Name:*           ${env.JOB_NAME}
                *Build Number:*       #${env.BUILD_NUMBER}
                *Build URL:*          ${env.BUILD_URL}
                *Duration:*           ${currentBuild.durationString}
                *Branch:*             ${env.GIT_BRANCH ?: 'N/A'}
            """.stripIndent()
        )
    }
}


}
